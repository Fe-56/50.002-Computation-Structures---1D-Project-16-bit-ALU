/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_tester_2 (
    input clk,
    input rst,
    input [4:0] fail_case,
    input [1:0] switch,
    output reg [1:0] overall,
    output reg [5:0] case_group,
    output reg case1,
    output reg case2,
    output reg case3,
    output reg case4,
    output reg case5,
    output reg case6,
    output reg case7
  );
  
  
  
  
  localparam START_feeder = 5'd0;
  localparam S0_feeder = 5'd1;
  localparam S1_feeder = 5'd2;
  localparam S2_feeder = 5'd3;
  localparam S3_feeder = 5'd4;
  localparam S4_feeder = 5'd5;
  localparam S5_feeder = 5'd6;
  localparam S6_feeder = 5'd7;
  localparam S7_feeder = 5'd8;
  localparam S8_feeder = 5'd9;
  localparam S9_feeder = 5'd10;
  localparam S10_feeder = 5'd11;
  localparam S11_feeder = 5'd12;
  localparam S12_feeder = 5'd13;
  localparam S13_feeder = 5'd14;
  localparam S14_feeder = 5'd15;
  localparam S15_feeder = 5'd16;
  localparam S16_feeder = 5'd17;
  localparam S17_feeder = 5'd18;
  localparam S18_feeder = 5'd19;
  localparam S19_feeder = 5'd20;
  localparam S20_feeder = 5'd21;
  localparam S21_feeder = 5'd22;
  localparam S22_feeder = 5'd23;
  localparam PASS_feeder = 5'd24;
  localparam FAIL_feeder = 5'd25;
  
  reg [4:0] M_feeder_d, M_feeder_q = START_feeder;
  
  wire [38-1:0] M_inputs_out;
  reg [5-1:0] M_inputs_selector;
  rom1_8 inputs (
    .selector(M_inputs_selector),
    .out(M_inputs_out)
  );
  
  wire [19-1:0] M_answers_out;
  reg [5-1:0] M_answers_selector;
  rom2_9 answers (
    .selector(M_answers_selector),
    .out(M_answers_out)
  );
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_10 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  reg [15:0] a;
  reg [15:0] b;
  reg [5:0] alufn;
  reg [15:0] s;
  reg z;
  reg v;
  reg n;
  reg [15:0] alu_actual;
  
  always @* begin
    M_feeder_d = M_feeder_q;
    
    overall = 2'h0;
    M_inputs_selector = 5'h00;
    M_answers_selector = 5'h00;
    case_group = 6'h00;
    case1 = 1'h0;
    case2 = 1'h0;
    case3 = 1'h0;
    case4 = 1'h0;
    case5 = 1'h0;
    case6 = 1'h0;
    case7 = 1'h0;
    M_alu_alufn = 6'h00;
    M_alu_a = 16'h0000;
    M_alu_b = 16'h0000;
    
    case (M_feeder_q)
      START_feeder: begin
        if (switch[1+0-:1]) begin
          M_feeder_d = S0_feeder;
        end else begin
          M_feeder_d = START_feeder;
        end
      end
      S0_feeder: begin
        M_inputs_selector = 5'h00;
        M_answers_selector = 5'h00;
        case_group = 6'h01;
        case1 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h01) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S1_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S1_feeder: begin
        M_inputs_selector = 5'h01;
        M_answers_selector = 5'h01;
        case_group = 3'h1;
        case1 = 1'h0;
        case2 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h02) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S2_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S2_feeder: begin
        M_inputs_selector = 5'h02;
        M_answers_selector = 5'h02;
        case_group = 6'h01;
        case2 = 1'h0;
        case3 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h03) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S3_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S3_feeder: begin
        M_inputs_selector = 5'h03;
        M_answers_selector = 5'h03;
        case_group = 6'h01;
        case3 = 1'h0;
        case4 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h04) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S4_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S4_feeder: begin
        M_inputs_selector = 5'h04;
        M_answers_selector = 5'h04;
        case_group = 6'h02;
        case4 = 1'h0;
        case1 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h05) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S5_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S5_feeder: begin
        M_inputs_selector = 5'h05;
        M_answers_selector = 5'h05;
        case_group = 6'h02;
        case1 = 1'h0;
        case2 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h06) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S6_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S6_feeder: begin
        M_inputs_selector = 5'h06;
        M_answers_selector = 5'h06;
        case_group = 6'h02;
        case2 = 1'h0;
        case3 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h07) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S7_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S7_feeder: begin
        M_inputs_selector = 5'h07;
        M_answers_selector = 5'h07;
        case_group = 6'h02;
        case3 = 1'h0;
        case4 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h08) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S8_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S8_feeder: begin
        M_inputs_selector = 5'h08;
        M_answers_selector = 5'h08;
        case_group = 6'h04;
        case4 = 1'h0;
        case1 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h09) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S9_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S9_feeder: begin
        M_inputs_selector = 5'h09;
        M_answers_selector = 5'h09;
        case_group = 6'h04;
        case1 = 1'h0;
        case2 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h0a) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S10_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S10_feeder: begin
        M_inputs_selector = 5'h0a;
        M_answers_selector = 5'h0a;
        case_group = 6'h04;
        case2 = 1'h0;
        case3 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h0b) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S11_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S11_feeder: begin
        M_inputs_selector = 5'h0b;
        M_answers_selector = 5'h0b;
        case_group = 6'h04;
        case3 = 1'h0;
        case4 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h0c) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S12_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S12_feeder: begin
        M_inputs_selector = 5'h0c;
        M_answers_selector = 5'h0c;
        case_group = 6'h04;
        case4 = 1'h0;
        case5 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h0d) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S13_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S13_feeder: begin
        M_inputs_selector = 5'h0d;
        M_answers_selector = 5'h0d;
        case_group = 6'h04;
        case5 = 1'h0;
        case6 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h0e) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S14_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S14_feeder: begin
        M_inputs_selector = 5'h0e;
        M_answers_selector = 5'h0e;
        case_group = 6'h04;
        case6 = 1'h0;
        case7 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h0f) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S15_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S15_feeder: begin
        M_inputs_selector = 5'h0f;
        M_answers_selector = 5'h0f;
        case_group = 6'h08;
        case7 = 1'h0;
        case1 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h10) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S16_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S16_feeder: begin
        M_inputs_selector = 5'h10;
        M_answers_selector = 5'h10;
        case_group = 6'h08;
        case1 = 1'h0;
        case2 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h11) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S17_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S17_feeder: begin
        M_inputs_selector = 5'h11;
        M_answers_selector = 5'h11;
        case_group = 6'h08;
        case2 = 1'h0;
        case3 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h12) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S18_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S18_feeder: begin
        M_inputs_selector = 5'h12;
        M_answers_selector = 5'h12;
        case_group = 6'h08;
        case3 = 1'h0;
        case4 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h13) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S19_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S19_feeder: begin
        M_inputs_selector = 5'h13;
        M_answers_selector = 5'h13;
        case_group = 6'h10;
        case4 = 1'h0;
        case1 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h14) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S20_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S20_feeder: begin
        M_inputs_selector = 5'h14;
        M_answers_selector = 5'h14;
        case_group = 6'h10;
        case1 = 1'h0;
        case2 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h15) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S21_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S21_feeder: begin
        M_inputs_selector = 5'h15;
        M_answers_selector = 5'h15;
        case_group = 6'h10;
        case2 = 1'h0;
        case3 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h16) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = S22_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      S22_feeder: begin
        M_inputs_selector = 5'h16;
        M_answers_selector = 5'h16;
        case_group = 6'h20;
        case3 = 1'h0;
        case1 = 1'h1;
        a = M_inputs_out[22+15-:16];
        b = M_inputs_out[6+15-:16];
        alufn = M_inputs_out[0+5-:6];
        s = M_answers_out[3+15-:16];
        z = M_answers_out[2+0-:1];
        v = M_answers_out[1+0-:1];
        n = M_answers_out[0+0-:1];
        M_alu_alufn = alufn;
        M_alu_a = a;
        M_alu_b = b;
        alu_actual = M_alu_alu;
        if (fail_case == 5'h17) begin
          alu_actual[0+0-:1] = ~alu_actual[0+0-:1];
        end
        if (alu_actual == s & M_alu_z == z & M_alu_v == v & M_alu_n == n) begin
          M_feeder_d = PASS_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
      PASS_feeder: begin
        overall = 2'h2;
        if (switch[0+0-:1]) begin
          M_feeder_d = START_feeder;
        end else begin
          M_feeder_d = PASS_feeder;
        end
      end
      FAIL_feeder: begin
        overall = 2'h1;
        if (switch[0+0-:1]) begin
          M_feeder_d = START_feeder;
        end else begin
          M_feeder_d = FAIL_feeder;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_feeder_q <= 1'h0;
    end else begin
      M_feeder_q <= M_feeder_d;
    end
  end
  
endmodule
