/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_slowclock_value;
  counter_1 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  wire [2-1:0] M_auto_test_overall;
  wire [6-1:0] M_auto_test_case_group;
  wire [1-1:0] M_auto_test_case1;
  wire [1-1:0] M_auto_test_case2;
  wire [1-1:0] M_auto_test_case3;
  wire [1-1:0] M_auto_test_case4;
  wire [1-1:0] M_auto_test_case5;
  wire [1-1:0] M_auto_test_case6;
  wire [1-1:0] M_auto_test_case7;
  reg [5-1:0] M_auto_test_fail_case;
  reg [2-1:0] M_auto_test_switch;
  auto_tester_2 auto_test (
    .clk(M_slowclock_value),
    .rst(rst),
    .fail_case(M_auto_test_fail_case),
    .switch(M_auto_test_switch),
    .overall(M_auto_test_overall),
    .case_group(M_auto_test_case_group),
    .case1(M_auto_test_case1),
    .case2(M_auto_test_case2),
    .case3(M_auto_test_case3),
    .case4(M_auto_test_case4),
    .case5(M_auto_test_case5),
    .case6(M_auto_test_case6),
    .case7(M_auto_test_case7)
  );
  
  wire [16-1:0] M_manual_test_s;
  wire [1-1:0] M_manual_test_z;
  wire [1-1:0] M_manual_test_v;
  wire [1-1:0] M_manual_test_n;
  wire [3-1:0] M_manual_test_display;
  reg [2-1:0] M_manual_test_button;
  reg [16-1:0] M_manual_test_data;
  manual_tester_3 manual_test (
    .clk(clk),
    .rst(rst),
    .button(M_manual_test_button),
    .data(M_manual_test_data),
    .s(M_manual_test_s),
    .z(M_manual_test_z),
    .v(M_manual_test_v),
    .n(M_manual_test_n),
    .display(M_manual_test_display)
  );
  
  
  localparam MANUAL_test = 1'd0;
  localparam AUTO_test = 1'd1;
  
  reg M_test_d, M_test_q = MANUAL_test;
  
  wire [(2'h3+0)-1:0] M_button_cond_out;
  reg [(2'h3+0)-1:0] M_button_cond_in;
  
  genvar GEN_button_cond0;
  generate
  for (GEN_button_cond0=0;GEN_button_cond0<2'h3;GEN_button_cond0=GEN_button_cond0+1) begin: button_cond_gen_0
    button_conditioner_4 button_cond (
      .clk(clk),
      .in(M_button_cond_in[GEN_button_cond0*(1)+(1)-1-:(1)]),
      .out(M_button_cond_out[GEN_button_cond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(2'h3+0)-1:0] M_button_detector_out;
  reg [(2'h3+0)-1:0] M_button_detector_in;
  
  genvar GEN_button_detector0;
  generate
  for (GEN_button_detector0=0;GEN_button_detector0<2'h3;GEN_button_detector0=GEN_button_detector0+1) begin: button_detector_gen_0
    edge_detector_5 button_detector (
      .clk(clk),
      .in(M_button_detector_in[GEN_button_detector0*(1)+(1)-1-:(1)]),
      .out(M_button_detector_out[GEN_button_detector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_6 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_7 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_test_d = M_test_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'h7;
    M_button_cond_in = io_button[0+2-:3];
    M_button_detector_in = M_button_cond_out;
    M_seg_values = 16'h6666;
    M_manual_test_button = M_button_detector_out[1+1-:2];
    M_manual_test_data[8+7-:8] = io_dip[8+7-:8];
    M_manual_test_data[0+7-:8] = io_dip[0+7-:8];
    M_auto_test_switch = io_dip[16+6+1-:2];
    M_auto_test_fail_case = io_dip[0+0+4-:5];
    
    case (M_test_q)
      MANUAL_test: begin
        io_led[0+7-:8] = M_manual_test_s[0+7-:8];
        io_led[8+7-:8] = M_manual_test_s[8+7-:8];
        io_led[16+2+0-:1] = M_manual_test_z;
        io_led[16+1+0-:1] = M_manual_test_v;
        io_led[16+0+0-:1] = M_manual_test_n;
        if (M_manual_test_display == 3'h0) begin
          M_seg_values = 16'h6666;
        end else begin
          if (M_manual_test_display == 3'h1) begin
            M_seg_values = 16'h6661;
          end else begin
            if (M_manual_test_display == 3'h2) begin
              M_seg_values = 16'h6667;
            end else begin
              if (M_manual_test_display == 3'h3) begin
                M_seg_values = 16'h6663;
              end else begin
                if (M_manual_test_display == 3'h4) begin
                  M_seg_values = 16'h6668;
                end
              end
            end
          end
        end
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_button_detector_out[0+0-:1]) begin
          M_test_d = AUTO_test;
        end
      end
      AUTO_test: begin
        io_led[0+0+0-:1] = M_auto_test_case1;
        io_led[0+1+0-:1] = M_auto_test_case2;
        io_led[0+2+0-:1] = M_auto_test_case3;
        io_led[0+3+0-:1] = M_auto_test_case4;
        io_led[0+4+0-:1] = M_auto_test_case5;
        io_led[0+5+0-:1] = M_auto_test_case6;
        io_led[0+6+0-:1] = M_auto_test_case7;
        io_led[8+0+5-:6] = M_auto_test_case_group;
        if (M_auto_test_overall == 2'h0) begin
          M_seg_values = 16'h6666;
        end else begin
          if (M_auto_test_overall == 2'h2) begin
            M_seg_values = 16'h0122;
          end else begin
            if (M_auto_test_overall == 2'h1) begin
              M_seg_values = 16'h3145;
            end
          end
        end
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_button_detector_out[0+0-:1]) begin
          M_test_d = MANUAL_test;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_test_q <= 1'h0;
    end else begin
      M_test_q <= M_test_d;
    end
  end
  
endmodule
