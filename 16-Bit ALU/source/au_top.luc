module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
) 

{  
  sig rst;                  // reset signal
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));
  auto_tester test(.clk(slowclock.value), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      multi_seven_seg seg;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
     
    usb_tx = usb_rx;        // loop serial port
     
    led = 8h00;             // turn LEDs off
    
    seg.values = {4h6, 4h6, 4h6, 4h6};
    
    test.fail_case = io_dip[0][4:0]; // to select the specific test case to fail
    
    io_led[0][0] = test.case1; // indicate that the 1st test case of the current case_group is being tested
    io_led[0][1] = test.case2; // indicate that the 2nd test case of the current case_group is being tested
    io_led[0][2] = test.case3; // indicate that the 3rd test case of the current case_group is being tested
    io_led[0][3] = test.case4; // indicate that the 4th test case of the current case_group is being tested
    io_led[0][4] = test.case5; // indicate that the 5th test case of the current case_group is being tested
    io_led[0][5] = test.case6; // indicate that the 6th test case of the current case_group is being tested
    io_led[0][6] = test.case7; // indicate that the 7th test case of the current case_group is being tested
    io_led[1][5:0] = test.case_group; // indicate the current case_group of the test case that is being tested
    
    if (test.overall == b00){
      seg.values = {4h6, 4h6, 4h6, 4h6}; // display nothing on 7 segments
    }
    
    else if (test.overall == b10){
      seg.values = {4h0, 4h1, 4h2, 4h2}; // display PASS on 7 segments
    }
    
    else if (test.overall == b01){
      seg.values = {4h3, 4h1, 4h4, 4h5}; // display FAIL on 7 segment
      }
        
    io_seg = ~seg.seg;      // connect segments to the driver
    io_sel = ~seg.sel;      // connect digit select to the driver
  }
}