module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
) 

{  
  sig rst;                  // reset signal
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst)); // slower clock for the auto_test so that we can actually see the io_led lighting up as the test cases are being run through
  auto_tester auto_test(.clk(slowclock.value), .rst(rst)); // the auto tester module
  manual_tester manual_test(.clk(clk), .rst(rst)); // the manual tester module
  
  fsm test(.clk(clk), .rst(rst)) = {MANUAL, AUTO}; // FSM to toggle between manual and auto testing
  
  button_conditioner button_cond[3](.clk(clk)); // for manual_test and fsm test
  edge_detector button_detector[3](#RISE(1), #FALL(0), .clk(clk)); // for manual_test and fsm test
  
  //button_conditioner button_cond_auto[2](.clk(slowclock.value)); // for auto_test
  //edge_detector button_detector_auto[2](#RISE(1), #FALL(0), .clk(slowclock.value)); // for auto_test
  
  multi_seven_seg seg(.clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
     
    usb_tx = usb_rx;        // loop serial port
     
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4b0111;        // select first digit
    
    button_cond.in = io_button[2:0]; // down button (io_button[2]), center button (io_button[1]), up button (io_button[0])
    button_detector.in = button_cond.out;
    
    seg.values = {4d10, 4d10, 4d10, 4d10}; // display nothing on the 7-segments display
    
    // connect the inputs to the manual_test module
    manual_test.button = button_detector.out[2:1]; // down button (io_button[2]), center button (io_button[1])
    manual_test.data[15:8] = io_dip[1];
    manual_test.data[7:0] = io_dip[0];
    
    // connect the inputs to the auto_test module
    auto_test.switch = io_dip[2][7:6]; // io_dip[2][7] to start the auto_test, io_dip[2][6] to reset the auto_test
    auto_test.fail_case = io_dip[0][4:0]; // to select the specific test case to fail
    
    case(test.q){
      test.MANUAL:
        io_led[0] = manual_test.s[7:0];
        io_led[1] = manual_test.s[15:8];
        io_led[2][2] = manual_test.z;
        io_led[2][1] = manual_test.v;
        io_led[2][0] = manual_test.n;
        
        if (manual_test.display == b000){ // display nothing on 7-segments
          seg.values = {4d10, 4d10, 4d10, 4d10};
        }
          
        else if (manual_test.display == b001){ // display A on 7-segments
          seg.values = {4d10, 4d10, 4d10, 4d11};
        }
        
        else if (manual_test.display == b010){ // display b on 7-segments
          seg.values = {4d10, 4d10, 4d10, 4d12};
        }
        
        else if (manual_test.display == b011){ // display F on 7-segments
          seg.values = {4d10, 4d10, 4d10, 4d13};
        }
        
        else if (manual_test.display == b100){ // display O on 7-segments
          seg.values = {4d10, 4d10, 4d10, 4h0};
        }
        
        io_seg = ~seg.seg;      // connect segments to the driver
        io_sel = ~seg.sel;      // connect digit select to the driver
        
        if (button_detector.out[0]){ // press the up button to toggle to auto_test module
          test.d = test.AUTO; // goes to the AUTO state
        }
        
      test.AUTO:
        io_led[0][0] = auto_test.case1; // indicate that the 1st test case of the current case_group is being tested
        io_led[0][1] = auto_test.case2; // indicate that the 2nd test case of the current case_group is being tested
        io_led[0][2] = auto_test.case3; // indicate that the 3rd test case of the current case_group is being tested
        io_led[0][3] = auto_test.case4; // indicate that the 4th test case of the current case_group is being tested
        io_led[0][4] = auto_test.case5; // indicate that the 5th test case of the current case_group is being tested
        io_led[0][5] = auto_test.case6; // indicate that the 6th test case of the current case_group is being tested
        io_led[0][6] = auto_test.case7; // indicate that the 7th test case of the current case_group is being tested
        io_led[0][7] = auto_test.case8; // indicate that the 8th test case of the current case_group is being tested
        io_led[1][5:0] = auto_test.case_group; // indicate the current case_group of the test case that is being tested
    
        if (auto_test.status == b00000){
          seg.values = {4d10, 4d10, 4d11, 4d15}; // display AU on 7 segments, to show that it is in auto tester mode
        }
          
        else if (auto_test.status == b00001){ // if Test Case #1 passed
          seg.values = {4d10, 4d10, 4d14, 4d1}; // display P1 on 7 segments
        }
          
        else if (auto_test.status == b00010){ // if Test Case #2 passed
          seg.values = {4d10, 4d10, 4d14, 4d2}; // display P2 on 7 segments
        }

        else if (auto_test.status == b00011){ // if Test Case #3 passed
          seg.values = {4d10, 4d10, 4d14, 4d3}; // display P3 on 7 segments
        }
    
        else if (auto_test.status == b00100){ // if Test Case #4 passed
          seg.values = {4d10, 4d10, 4d14, 4d4}; // display P4 on 7 segments
        }
          
        else if (auto_test.status == b00101){ // if Test Case #5 passed
          seg.values = {4d10, 4d10, 4d14, 4d5}; // display P5 on 7 segments
        }  
          
        else if (auto_test.status == b00110){ // if Test Case #6 passed
          seg.values = {4d10, 4d10, 4d14, 4d6}; // display P6 on 7 segments
        }
          
        else if (auto_test.status == b00111){ // if Test Case #7 passed
          seg.values = {4d10, 4d10, 4d14, 4d7}; // display P7 on 7 segments
        } 
          
        else if (auto_test.status == b01000){ // if Test Case #8 passed
          seg.values = {4d10, 4d10, 4d14, 4d8}; // display P8 on 7 segments
        }    
          
        else if (auto_test.status == b01001){ // if Test Case #9 passed
          seg.values = {4d10, 4d10, 4d14, 4d9}; // display P9 on 7 segments
        }     
          
        else if (auto_test.status == b01010){ // if Test Case #10 passed
          seg.values = {4d10, 4d14, 4d1, 4d0}; // display P10 on 7 segments
        } 
          
        else if (auto_test.status == b01011){ // if Test Case #11 passed
          seg.values = {4d10, 4d14, 4d1, 4d1}; // display P11 on 7 segments
        }   
          
        else if (auto_test.status == b01100){ // if Test Case #12 passed
          seg.values = {4d10, 4d14, 4d1, 4d2}; // display P12 on 7 segments
        } 
          
        else if (auto_test.status == b01101){ // if Test Case #13 passed
          seg.values = {4d10, 4d14, 4d1, 4d3}; // display P13 on 7 segments
        } 
          
        else if (auto_test.status == b01110){ // if Test Case #14 passed
          seg.values = {4d10, 4d14, 4d1, 4d4}; // display P14 on 7 segments
        }  
          
        else if (auto_test.status == b01111){ // if Test Case #15 passed
          seg.values = {4d10, 4d14, 4d1, 4d5}; // display P15 on 7 segments
        }   
          
        else if (auto_test.status == b10000){ // if Test Case #16 passed
          seg.values = {4d10, 4d14, 4d1, 4d6}; // display P16 on 7 segments
        } 
          
        else if (auto_test.status == b10001){ // if Test Case #17 passed
          seg.values = {4d10, 4d14, 4d1, 4d7}; // display P17 on 7 segments
        }
          
        else if (auto_test.status == b10010){ // if Test Case #18 passed
          seg.values = {4d10, 4d14, 4d1, 4d8}; // display P18 on 7 segments
        }
          
        else if (auto_test.status == b10011){ // if Test Case #19 passed
          seg.values = {4d10, 4d14, 4d1, 4d9}; // display P19 on 7 segments
        }
          
        else if (auto_test.status == b10100){ // if Test Case #20 passed
          seg.values = {4d10, 4d14, 4d2, 4d0}; // display P20 on 7 segments
        } 

        else if (auto_test.status == b10101){ // if Test Case #21 passed
          seg.values = {4d10, 4d14, 4d2, 4d1}; // display P21 on 7 segments
        }   

        else if (auto_test.status == b10110){ // if Test Case #22 passed
          seg.values = {4d10, 4d14, 4d2, 4d2}; // display P22 on 7 segments
        }   

        else if (auto_test.status == b10111){ // if Test Case #23 passed
          seg.values = {4d10, 4d14, 4d2, 4d3}; // display P23 on 7 segments
        }   

        else if (auto_test.status == b11000){ // if Test Case #24 passed
          seg.values = {4d10, 4d14, 4d2, 4d4}; // display P24 on 7 segments
        }   

        else if (auto_test.status == b11001){ // if Test Case #25 passed
          seg.values = {4d10, 4d14, 4d2, 4d5}; // display P25 on 7 segments
        }   

        else if (auto_test.status == b11010){ // if Test Case #26 passed
          seg.values = {4d10, 4d14, 4d2, 4d6}; // display P26 on 7 segments
        }   

        else if (auto_test.status == b11011){ // if Test Case #27 passed
          seg.values = {4d10, 4d14, 4d2, 4d7}; // display P27 on 7 segments
        }                                                                
          
        else if (auto_test.status == b11100){
          seg.values = {4d10, 4d10, 4d14, 4d11}; // display PA on 7 segments, to represent PASS, where all 27 test cases passed
        }
    
        else if (auto_test.status == b11101){
          seg.values = {4d10, 4d10, 4d13, 4d11}; // display FA on 7 segments, to represent FAIL, where there is one test case that failed
        }
        
        io_seg = ~seg.seg;      // connect segments to the driver
        io_sel = ~seg.sel;      // connect digit select to the driver
        
        if (button_detector.out[0]){ // press the up button toggle to manual_test module
          test.d = test.MANUAL; // goes to the MANUAL state
        }
        
  }
}